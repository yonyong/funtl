(window.webpackJsonp=window.webpackJsonp||[]).push([[336],{785:function(s,e,a){"use strict";a.r(e);var n=a(2),t=Object(n.a)({},function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"对于快速追踪与定位问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对于快速追踪与定位问题","aria-hidden":"true"}},[s._v("#")]),s._v(" 对于快速追踪与定位问题")]),s._v(" "),a("p",[s._v("在微服务复杂的链式调用中，我们会比单体架构更难以追踪与定位问题。因此，在设计的时候，需要特别注意。一种比较好的方案是，当 RESTful API 接口出现非 2xx 的 HTTP 错误码响应时，采用全局的异常结构响应信息。其中，code 字段用来表示某类错误的错误码，在微服务中应该加上“{biz_name}/”前缀以便于定位错误发生在哪个业务系统上。我们来看一个案例，假设“用户中心”某个接口没有权限获取资源而出现错误，我们的业务系统可以响应“UC/AUTH_DENIED”，并且通过自动生成的 UUID 值的 request_id 字段，在日志系统中获得错误的详细信息。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('HTTP/1.1 400 Bad Request\nContent-Type: application/json\n{\n    "code": "INVALID_ARGUMENT",\n    "message": "{error message}",\n    "cause": "{cause message}",\n    "request_id": "01234567-89ab-cdef-0123-456789abcdef",\n    "host_id": "{server identity}",\n    "server_time": "2014-01-01T12:00:00Z"\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("此外，我们需要在记录日志时，标记出错误来源以及错误详情便于更好地分析与定位问题。")])])},[],!1,null,null,null);e.default=t.exports}}]);