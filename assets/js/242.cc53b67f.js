(window.webpackJsonp=window.webpackJsonp||[]).push([[242],{913:function(t,r,e){"use strict";e.r(r);var a=e(2),s=Object(a.a)({},function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"微服务解决复杂问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#微服务解决复杂问题","aria-hidden":"true"}},[t._v("#")]),t._v(" 微服务解决复杂问题")]),t._v(" "),e("p",[t._v("Java 微服务架构，互联网开发真正需要的技术，也是我们高薪就业的保证，经过本轮学习，我们会掌握从底层 Linux 的安装到最终 DevOps 的所需技能。包括但不限于 Spring Boot、Spring Cloud、Dubbo、Zookeeper、Redis、ELK、RabbitMQ、Ubuntu、Docker、Kubernetes、Jenkins 等全栈技能")]),t._v(" "),e("h2",{attrs:{id:"视频合集"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#视频合集","aria-hidden":"true"}},[t._v("#")]),t._v(" 视频合集")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://www.bilibili.com/video/av29384041",target:"_blank",rel:"noopener noreferrer"}},[t._v("【外链直达】Java 微服务架构解决复杂问题"),e("OutboundLink")],1)])]),t._v(" "),e("h2",{attrs:{id:"微服务简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#微服务简介","aria-hidden":"true"}},[t._v("#")]),t._v(" 微服务简介")]),t._v(" "),e("p",[t._v("近年来，微服务在应用开发和部署方面取得了显著的进步。将应用开发或者重构成微服务以分离服务，通过 API 以明确的方式来相互“对话” 。例如，每个微服务都是自包含（self-contained），各自维护自己的数据存储（这非常有意义），可以独立更新其他服务。")]),t._v(" "),e("p",[e("router-link",{attrs:{to:"/funtl/zh/micro-service-intro/"}},[e("strong",[t._v("开始学习")])])],1),t._v(" "),e("h2",{attrs:{id:"linux"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#linux","aria-hidden":"true"}},[t._v("#")]),t._v(" Linux")]),t._v(" "),e("p",[t._v("Linux 是一种自由和开放源码的类 UNIX 操作系统，使用 Linux 内核。目前存在着许多不同的 Linux 发行版，可安装在各种各样的电脑硬件设备，从手机、平板电脑、路由器和影音游戏控制台，到桌上型电脑，大型电脑和超级电脑。 Linux 是一个领先的操作系统，世界上运算最快的 10 台超级电脑运行的都是 Linux 操作系统。")]),t._v(" "),e("p",[e("router-link",{attrs:{to:"/funtl/zh/linux/"}},[e("strong",[t._v("开始学习")])])],1),t._v(" "),e("h2",{attrs:{id:"docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker","aria-hidden":"true"}},[t._v("#")]),t._v(" Docker")]),t._v(" "),e("p",[t._v("Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核的 cgroup，namespace，以及 AUFS 类的 Union FS 等技术，对进程进行封装隔离，属于 操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。最初实现是基于 LXC，从 0.7 版本以后开始去除 LXC，转而使用自行开发的 libcontainer，从 1.11 开始，则进一步演进为使用 runC 和 containerd。")]),t._v(" "),e("p",[e("router-link",{attrs:{to:"/funtl/zh/docker/"}},[e("strong",[t._v("开始学习")])])],1),t._v(" "),e("h2",{attrs:{id:"docker-compose"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose","aria-hidden":"true"}},[t._v("#")]),t._v(" Docker Compose")]),t._v(" "),e("p",[t._v("Docker Compose 是 Docker 官方编排（Orchestration）项目之一，负责快速的部署分布式应用。")]),t._v(" "),e("p",[e("router-link",{attrs:{to:"/funtl/zh/docker-compose/"}},[e("strong",[t._v("开始学习")])])],1),t._v(" "),e("h2",{attrs:{id:"gitlab"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gitlab","aria-hidden":"true"}},[t._v("#")]),t._v(" GitLab")]),t._v(" "),e("p",[t._v("GitLab 是利用 Ruby on Rails 一个开源的版本管理系统，实现一个自托管的 Git 项目仓库，可通过 Web 界面进行访问公开的或者私人项目。它拥有与 Github 类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。团队成员可以利用内置的简单聊天程序 (Wall) 进行交流。它还提供一个代码片段收集功能可以轻松实现代码复用，便于日后有需要的时候进行查找。")]),t._v(" "),e("p",[e("router-link",{attrs:{to:"/funtl/zh/gitlab/"}},[e("strong",[t._v("开始学习")])])],1),t._v(" "),e("h2",{attrs:{id:"nexus"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nexus","aria-hidden":"true"}},[t._v("#")]),t._v(" Nexus")]),t._v(" "),e("p",[t._v("Nexus 是一个强大的仓库管理器，极大地简化了内部仓库的维护和外部仓库的访问。")]),t._v(" "),e("p",[e("router-link",{attrs:{to:"/funtl/zh/nexus/"}},[e("strong",[t._v("开始学习")])])],1),t._v(" "),e("h2",{attrs:{id:"registry"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#registry","aria-hidden":"true"}},[t._v("#")]),t._v(" Registry")]),t._v(" "),e("p",[t._v("官方的 Docker Hub 是一个用于管理公共镜像的地方，我们可以在上面找到我们想要的镜像，也可以把我们自己的镜像推送上去。但是，有时候我们的服务器无法访问互联网，或者你不希望将自己的镜像放到公网当中，那么你就需要 Docker Registry，它可以用来存储和管理自己的镜像。")]),t._v(" "),e("p",[e("router-link",{attrs:{to:"/funtl/zh/registry/"}},[e("strong",[t._v("开始学习")])])],1)])},[],!1,null,null,null);r.default=s.exports}}]);