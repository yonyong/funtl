(window.webpackJsonp=window.webpackJsonp||[]).push([[388],{230:function(e,a,n){"use strict";n.r(a);var t=n(2),s=Object(t.a)({},function(){var e=this,a=e.$createElement,n=e._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"说说常用开源框架中设计模式使用分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#说说常用开源框架中设计模式使用分析","aria-hidden":"true"}},[e._v("#")]),e._v(" 说说常用开源框架中设计模式使用分析")]),e._v(" "),n("h2",{attrs:{id:"一、前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、前言","aria-hidden":"true"}},[e._v("#")]),e._v(" 一、前言")]),e._v(" "),n("p",[e._v("设计模式代表了软件设计的最佳实践，是经过不断总结提炼出来的代码设计经验的分类总结，这些模式或者可以简化代码，或者可以是代码逻辑开起来清晰，或者对功能扩展很方便")]),e._v(" "),n("p",[e._v("设计模式按照使用场景可以分为三大类：")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("创建型模式（Creational Patterns）：对对象的实例化过程进行抽象，这使得一个系统可以不用关心这些对象是如何创建，组合，呈现的，对于类创建模式来说通过使用继承改变实例化的类，对于对象创建模式来说通过使用代理来实例化所需要的对象。")]),e._v(" "),n("ul",[n("li",[e._v("工厂模式")]),e._v(" "),n("li",[e._v("原型模式")]),e._v(" "),n("li",[e._v("构建者模式")]),e._v(" "),n("li",[e._v("单例模式")])])]),e._v(" "),n("li",[n("p",[e._v("结构型模式（Structural Patterns）：通过对多个类和对象进行组合得到复杂结构的类，一般使用继承继承或者成员变量引用形式来实现。")]),e._v(" "),n("ul",[n("li",[e._v("适配器模式")]),e._v(" "),n("li",[e._v("桥接模式")]),e._v(" "),n("li",[e._v("过滤器模式")]),e._v(" "),n("li",[e._v("组合模式")]),e._v(" "),n("li",[e._v("装饰者模式")]),e._v(" "),n("li",[e._v("门面模式")]),e._v(" "),n("li",[e._v("享元模式")]),e._v(" "),n("li",[e._v("代理模式")])])]),e._v(" "),n("li",[n("p",[e._v("行为型模式（Behavioral Patterns）：行为模式不仅表达了对象和类，还表达了他们之间的交互，涉及到了对象和算法的分配。")]),e._v(" "),n("ul",[n("li",[e._v("责任链模式")]),e._v(" "),n("li",[e._v("命令模式")]),e._v(" "),n("li",[e._v("解释器模式")]),e._v(" "),n("li",[e._v("迭代器模式")]),e._v(" "),n("li",[e._v("中介者模式")]),e._v(" "),n("li",[e._v("备忘录模式")]),e._v(" "),n("li",[e._v("观察者模式")]),e._v(" "),n("li",[e._v("状态模式")]),e._v(" "),n("li",[e._v("空对象模式")]),e._v(" "),n("li",[e._v("策略模式")]),e._v(" "),n("li",[e._v("模板方法模式")]),e._v(" "),n("li",[e._v("访问者模式")])])])]),e._v(" "),n("h2",{attrs:{id:"二、责任链设计模式（chain-of-responsibility-pattern）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、责任链设计模式（chain-of-responsibility-pattern）","aria-hidden":"true"}},[e._v("#")]),e._v(" 二、责任链设计模式（Chain of Responsibility Pattern）")]),e._v(" "),n("h3",{attrs:{id:"介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#介绍","aria-hidden":"true"}},[e._v("#")]),e._v(" 介绍")]),e._v(" "),n("p",[e._v("责任链模式是把多个对象串联起来形成一个链状结构，让每个对象都有机会对事件发送者的请求进行处理。责任链模式是设计模式中的行为模式，设计意图是为了使事件发送者和事件接受者之间解耦。通常责任链链中的每个对象都有下一个对象的引入（例如 Tomcat 里面 "),n("code",[e._v("StandardPipeline")]),e._v(" 用来管理 "),n("code",[e._v("valve")]),e._v("），或者有个同一个链管理工厂里面使用数组存放了所有的对象（例如 Tomcat 里面 "),n("code",[e._v("ApplicationFilterChain")]),e._v(" 用来关系 filter）。")]),e._v(" "),n("h3",{attrs:{id:"tomcat-中-valve-链"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tomcat-中-valve-链","aria-hidden":"true"}},[e._v("#")]),e._v(" Tomcat 中 Valve 链")]),e._v(" "),n("p",[e._v("Tomcat 中 "),n("code",[e._v("StandardEngine")]),e._v(", "),n("code",[e._v("StandardHost")]),e._v(", "),n("code",[e._v("StandardContext")]),e._v(" 里面都有自己 "),n("code",[e._v("StandardPipeline")]),e._v(",下面以 "),n("code",[e._v("StandardEngine")]),e._v(" 里面 "),n("code",[e._v("StandardPipeline")]),e._v(" 为例讲解")]),e._v(" "),n("p",[n("img",{attrs:{src:"/assets/5879294-bf812e77605ba1a3.png",alt:""}})]),e._v(" "),n("p",[e._v("从上面类图可知道每个 "),n("code",[e._v("Valve")]),e._v(" 都要继承 "),n("code",[e._v("ValveBase")]),e._v(" 类，该类里面有一个 "),n("code",[e._v("Valve")]),e._v(" 的引用，实际是链中下一个节点对象，"),n("code",[e._v("Valve")]),e._v(" 就是通过每个 "),n("code",[e._v("Valve")]),e._v(" 里面的 "),n("code",[e._v("next")]),e._v(" 串联为链的。")]),e._v(" "),n("p",[n("img",{attrs:{src:"/assets/5879294-51ec28c227c785bd.png",alt:""}})]),e._v(" "),n("p",[e._v("每个 "),n("code",[e._v("valve")]),e._v(" 的 "),n("code",[e._v("invoke")]),e._v(" 方法里面调用 "),n("code",[e._v("next.invoke")]),e._v(" 激活链中下一个节点,并且 "),n("code",[e._v("StandardEngine")]),e._v(", "),n("code",[e._v("StandardHost")]),e._v(", "),n("code",[e._v("StandardContext")]),e._v(" 都有一个 "),n("code",[e._v("basic valve")]),e._v(" 这个 "),n("code",[e._v("valve")]),e._v(" 在链的末尾用来激活子容器的 "),n("code",[e._v("valve")]),e._v(" 链。")]),e._v(" "),n("h3",{attrs:{id:"tomcat-中-filter-链"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tomcat-中-filter-链","aria-hidden":"true"}},[e._v("#")]),e._v(" Tomcat 中 Filter 链")]),e._v(" "),n("p",[e._v("Tomcat 中 "),n("code",[e._v("Filter")]),e._v(" 链是使用 "),n("code",[e._v("ApplicationFilterChain")]),e._v(" 来管理的，具体结构如下图：")]),e._v(" "),n("p",[n("img",{attrs:{src:"/assets/5879294-a7ecb943aa15c858.png",alt:""}})]),e._v(" "),n("p",[e._v("可知 "),n("code",[e._v("Filter")]),e._v(" 链不是像 "),n("code",[e._v("Valve")]),e._v(" 一样在内部维护下个节点的引用，而是在 "),n("code",[e._v("ApplicationFilterChain")]),e._v(" 中搞了个数组存放所有的 "),n("code",[e._v("Filter")]),e._v("，并通过 "),n("code",[e._v("n")]),e._v(" 统计 "),n("code",[e._v("Filter")]),e._v(" 总个数，"),n("code",[e._v("pos")]),e._v(" 是当前 "),n("code",[e._v("filter")]),e._v(" 的下标。")]),e._v(" "),n("p",[n("code",[e._v("ApplicationFilterChain")]),e._v(" 的 "),n("code",[e._v("doFilter")]),e._v(" 代码如下：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public void doFilter(ServletRequest request, ServletResponse response)\n        throws IOException, ServletException {\n        ...\n        internalDoFilter(request,response);\n        ...\n    }\n\n\nprivate void internalDoFilter(ServletRequest request, ServletResponse response) throws IOException, ServletException {\n\n        // Call the next filter if there is one\n        if (pos < n) {\n\n            //获取filter链中下标为pos的filter\n            ApplicationFilterConfig filterConfig = filters[pos++];\n            Filter filter = null;\n            try {\n                filter = filterConfig.getFilter();\n                support.fireInstanceEvent(InstanceEvent.BEFORE_FILTER_EVENT,\n                                          filter, request, response);\n\n                if (request.isAsyncSupported() && "false".equalsIgnoreCase(\n                        filterConfig.getFilterDef().getAsyncSupported())) {\n                    request.setAttribute(Globals.ASYNC_SUPPORTED_ATTR,\n                            Boolean.FALSE);\n                }\n\n                ...\n\n                //调用自定义filter的dofilter方法\n                filter.doFilter(request, response, this);\n\n\n                support.fireInstanceEvent(InstanceEvent.AFTER_FILTER_EVENT,\n                                          filter, request, response);\n            } \n            ....\n\n    }\n   .....\n}\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br"),n("span",{staticClass:"line-number"},[e._v("39")]),n("br"),n("span",{staticClass:"line-number"},[e._v("40")]),n("br"),n("span",{staticClass:"line-number"},[e._v("41")]),n("br")])]),n("h3",{attrs:{id:"使用场景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用场景","aria-hidden":"true"}},[e._v("#")]),e._v(" 使用场景")]),e._v(" "),n("ul",[n("li",[e._v("当一个请求需要根据请求参数的不同由不同对象来处理时候。")]),e._v(" "),n("li",[e._v("当一个请求需要固定对象顺序处理，并且可扩展性的在固定顺序里面插入新的对象进行处理时候。")])]),e._v(" "),n("h2",{attrs:{id:"三、工厂模式（factory-pattern）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、工厂模式（factory-pattern）","aria-hidden":"true"}},[e._v("#")]),e._v(" 三、工厂模式（Factory Pattern）")]),e._v(" "),n("h3",{attrs:{id:"介绍-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#介绍-2","aria-hidden":"true"}},[e._v("#")]),e._v(" 介绍")]),e._v(" "),n("p",[e._v("工厂模式是创建型模式，他封装了对象的创建过程，调用者使用具体的工厂方法根据参数就可以获取对应的对象。")]),e._v(" "),n("h3",{attrs:{id:"spring-框架中-beanfactory"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-框架中-beanfactory","aria-hidden":"true"}},[e._v("#")]),e._v(" Spring 框架中 BeanFactory")]),e._v(" "),n("p",[n("img",{attrs:{src:"/assets/5879294-2d102832375148ef.png",alt:""}})]),e._v(" "),n("p",[e._v("如图 "),n("code",[e._v("BeanFactory")]),e._v(" 接口提供了 "),n("code",[e._v("getBean")]),e._v(" 方法，在 "),n("code",[e._v("AbstractBeanFactory")]),e._v(" 中实现了该方法，经过层层继承，实现，最后 "),n("code",[e._v("DefaultListableBeanFactory")]),e._v(" 实现了 "),n("code",[e._v("BeanDefinitionRegistry")]),e._v(" 接口用来保存 "),n("code",[e._v("bean")]),e._v(" 定义，继承了 "),n("code",[e._v("AbstractAutowireCapableBeanFactory")]),e._v(" 用来支撑 "),n("code",[e._v("autowired")]),e._v("。")]),e._v(" "),n("h3",{attrs:{id:"举个例子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#举个例子","aria-hidden":"true"}},[e._v("#")]),e._v(" 举个例子")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@Test\npublic void testBeanFactoy() throws NamingException, SQLException, ParseException, IOException {\n\n    // 创建 Bean 工厂\n    DefaultListableBeanFactory bf = new DefaultListableBeanFactory();\n\n    // 给 Bean 工厂添加 Bean 定义, 解析 xml 里面的 Bean 放入 Bean 工厂\n    loadBeanDefinitions(bf);\n\n    // 根据名字从 Bean 工厂获取 Bean\n    Hello hello = (Hello) bf.getBean("hello");\n    hello.sayHello();\n\n    Hello2 hello2 = (Hello2) bf.getBean("hello2");\n    hello2.sayHello();\n\n\n}\n\nprotected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) throws IOException {\n    XmlBeanDefinitionReader beanDefinitionReader = new XmlBeanDefinitionReader(beanFactory);\n\n    String[] configLocations = new String[] { "beans2.xml" };\n    if (configLocations != null) {\n        beanDefinitionReader.loadBeanDefinitions(configLocations);\n    }\n}\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br")])]),n("h3",{attrs:{id:"使用场景-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用场景-2","aria-hidden":"true"}},[e._v("#")]),e._v(" 使用场景")]),e._v(" "),n("ul",[n("li",[e._v("不同条件下创建不同实例，用于统一管理 Bean")]),e._v(" "),n("li",[e._v("不同条件下调用不同工厂方法获取不同场景下的 Bean")])]),e._v(" "),n("h2",{attrs:{id:"四、单例设计模式（singleton-pattern）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、单例设计模式（singleton-pattern）","aria-hidden":"true"}},[e._v("#")]),e._v(" 四、单例设计模式（Singleton Pattern）")]),e._v(" "),n("h3",{attrs:{id:"介绍-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#介绍-3","aria-hidden":"true"}},[e._v("#")]),e._v(" 介绍")]),e._v(" "),n("p",[e._v("单例模式是一种创建型模式，单例模式提供一个创建对象的接口，但是多次调用该接口返回的是同一个实例的引用，目的是为了保证只有一个实例，并且提供一个访问这个实例的统一接口。")]),e._v(" "),n("h3",{attrs:{id:"spring-中单例-bean-的创建"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-中单例-bean-的创建","aria-hidden":"true"}},[e._v("#")]),e._v(" Spring 中单例 Bean 的创建")]),e._v(" "),n("p",[e._v("Spring 中默认配置的 "),n("code",[e._v("bean")]),e._v(" 的 "),n("code",[e._v("scope")]),e._v(" 为 "),n("code",[e._v("singleton")]),e._v("，也就是单例作用域。那么看看它是如何做到的。在 "),n("code",[e._v("AbstractBeanFactory")]),e._v(" 类里面的 "),n("code",[e._v("doGetBean")]),e._v(" 方法：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("protected Object doGetBean(\n            final String name, final Class requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException {\n\n    final String beanName = transformedBeanName(name);\n    Object bean = null;\n\n    // 解决set循环依赖\n    Object sharedInstance = getSingleton(beanName);\n    if (sharedInstance != null && args == null) {\n        ...\n    }\n\n    else {\n        ...\n        // 创建单件bean.\n        if (mbd.isSingleton()) {\n            sharedInstance = getSingleton(beanName, new ObjectFactory() {\n                public Object getObject() throws BeansException {\n                    try {\n                        return createBean(beanName, mbd, args);\n                    }\n                    catch (BeansException ex) {\n                    ...\n                        throw ex;\n                    }\n                }\n            });\n            bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);\n        }\n       //创建原型bean\n        else if (mbd.isPrototype()) {\n            ...\n        }\n        //创建request作用域bean\n        else {\n            ...\n        }\n    }\n            ...\n    return bean;\n}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br"),n("span",{staticClass:"line-number"},[e._v("39")]),n("br"),n("span",{staticClass:"line-number"},[e._v("40")]),n("br"),n("span",{staticClass:"line-number"},[e._v("41")]),n("br")])]),n("p",[e._v("getSingleton 代码：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public Object getSingleton(String beanName, ObjectFactory singletonFactory) {\n    Assert.notNull(beanName, \"'beanName' must not be null\");\n    synchronized (this.singletonObjects) {\n        Object singletonObject = this.singletonObjects.get(beanName);\n        if (singletonObject == null) {\n            ...\n            beforeSingletonCreation(beanName);\n            ...\n            try {\n                singletonObject = singletonFactory.getObject();\n            }\n            catch (BeanCreationException ex) {\n                ...\n            }\n            finally {\n                if (recordSuppressedExceptions) {\n                    this.suppressedExceptions = null;\n                }\n                afterSingletonCreation(beanName);\n            }\n            addSingleton(beanName, singletonObject);\n        }\n        return (singletonObject != NULL_OBJECT ? singletonObject : null);\n    }\n}\n\nprotected void addSingleton(String beanName, Object singletonObject) {\n    synchronized (this.singletonObjects) {\n        this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT));\n        this.singletonFactories.remove(beanName);\n        this.earlySingletonObjects.remove(beanName);\n        this.registeredSingletons.add(beanName);\n    }\n}\n\nprivate final Map singletonObjects = CollectionFactory.createConcurrentMapIfPossible(16);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br")])]),n("p",[e._v("可知 Spring 内部四通过一个 "),n("code",[e._v("ConcurrentMap")]),e._v(" 来管理单件 "),n("code",[e._v("bean")]),e._v(" 的。获取 "),n("code",[e._v("bean")]),e._v(" 时候会先看看 "),n("code",[e._v("singletonObjects")]),e._v(" 中是否有，有则直接返回，没有则创建后放入。")]),e._v(" "),n("p",[n("img",{attrs:{src:"/assets/5879294-3013e4bf12ef0274.png",alt:""}})]),e._v(" "),n("p",[e._v("Spring 的 "),n("code",[e._v("bean")]),e._v(" 工厂管理的单例模式管理的是多个 "),n("code",[e._v("bean")]),e._v(" 实例的单例，是工厂模式管理所有的 "),n("code",[e._v("bean")]),e._v(",而每个 "),n("code",[e._v("bean")]),e._v(" 的创建又使用了单例模式。")]),e._v(" "),n("h3",{attrs:{id:"使用场景-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用场景-3","aria-hidden":"true"}},[e._v("#")]),e._v(" 使用场景")]),e._v(" "),n("ul",[n("li",[e._v("同一个 JVM 应用的不同模块需要使用同一个对象实例进行信息共享。")]),e._v(" "),n("li",[e._v("需要同一个实例来生成全局统一的序列号")])]),e._v(" "),n("h2",{attrs:{id:"五、原型设计模式（prototype-pattern）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五、原型设计模式（prototype-pattern）","aria-hidden":"true"}},[e._v("#")]),e._v(" 五、原型设计模式（Prototype Pattern）")]),e._v(" "),n("h3",{attrs:{id:"介绍-4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#介绍-4","aria-hidden":"true"}},[e._v("#")]),e._v(" 介绍")]),e._v(" "),n("p",[e._v("相比单例设计模式，原型模式是每次创建一个对象，下面看下 Spring 是如何使用原型模式的")]),e._v(" "),n("h3",{attrs:{id:"spring-中原型-bean-的创建"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-中原型-bean-的创建","aria-hidden":"true"}},[e._v("#")]),e._v(" Spring 中原型 bean 的创建")]),e._v(" "),n("p",[e._v("创建原型 "),n("code",[e._v("bean")]),e._v(" 需要在 "),n("code",[e._v("xml")]),e._v(" 特别说明：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<bean id="hello" class="com.lusifer.demo.Hello" scope="prototype"/>\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("protected <T> T doGetBean(\n        final String name, final Class<T> requiredType, final Object[] args, boolean typeCheckOnly)\n        throws BeansException {\n\n    final String beanName = transformedBeanName(name);\n    Object bean;\n\n    // Eagerly check singleton cache for manually registered singletons.\n    Object sharedInstance = getSingleton(beanName);\n    if (sharedInstance != null && args == null) {\n     ...\n    }\n\n    else {\n        ...\n\n        try {\n            ...\n\n            // Create bean instance.\n            if (mbd.isSingleton()) {\n                ...\n            }\n            //创建原型bean\n            else if (mbd.isPrototype()) {\n                // It's a prototype -> create a new instance.\n                Object prototypeInstance = null;\n                try {\n                    beforePrototypeCreation(beanName);\n                    prototypeInstance = createBean(beanName, mbd, args);\n                }\n                finally {\n                    afterPrototypeCreation(beanName);\n                }\n                bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);\n            }\n\n            else {\n                ...\n            }\n        }\n        catch (BeansException ex) {\n            cleanupAfterBeanCreationFailure(beanName);\n            throw ex;\n        }\n    }\n ...\n    return (T) bean;\n}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br"),n("span",{staticClass:"line-number"},[e._v("39")]),n("br"),n("span",{staticClass:"line-number"},[e._v("40")]),n("br"),n("span",{staticClass:"line-number"},[e._v("41")]),n("br"),n("span",{staticClass:"line-number"},[e._v("42")]),n("br"),n("span",{staticClass:"line-number"},[e._v("43")]),n("br"),n("span",{staticClass:"line-number"},[e._v("44")]),n("br"),n("span",{staticClass:"line-number"},[e._v("45")]),n("br"),n("span",{staticClass:"line-number"},[e._v("46")]),n("br"),n("span",{staticClass:"line-number"},[e._v("47")]),n("br"),n("span",{staticClass:"line-number"},[e._v("48")]),n("br"),n("span",{staticClass:"line-number"},[e._v("49")]),n("br")])]),n("p",[n("code",[e._v("createBean")]),e._v(" 函数里面则是根据 "),n("code",[e._v("bean")]),e._v(" 定义创建新 "),n("code",[e._v("bean")]),e._v("，感兴趣的可以看看。")]),e._v(" "),n("h3",{attrs:{id:"使用场景-4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用场景-4","aria-hidden":"true"}},[e._v("#")]),e._v(" 使用场景")]),e._v(" "),n("p",[e._v("当有业务场景使用某个 "),n("code",[e._v("bean")]),e._v(" 时候需要使用自己的一个拷贝的时候使用。")]),e._v(" "),n("h2",{attrs:{id:"六、策略模式（strategy-pattern）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#六、策略模式（strategy-pattern）","aria-hidden":"true"}},[e._v("#")]),e._v(" 六、策略模式（Strategy Pattern）")]),e._v(" "),n("h3",{attrs:{id:"介绍-5"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#介绍-5","aria-hidden":"true"}},[e._v("#")]),e._v(" 介绍")]),e._v(" "),n("p",[e._v("策略模式属于行为性模式，它定义一系列的算法对象,使用时候可以使它们相互替换。")]),e._v(" "),n("h3",{attrs:{id:"spring-中-bean-实例化策略"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-中-bean-实例化策略","aria-hidden":"true"}},[e._v("#")]),e._v(" Spring 中 bean 实例化策略")]),e._v(" "),n("p",[n("img",{attrs:{src:"/assets/5879294-24f08d52b6fc7fba.png",alt:""}})]),e._v(" "),n("p",[e._v("从图知道：接口 "),n("code",[e._v("InstantiationStrategy")]),e._v(" 是实例化策略接口类，它定义了三个实例化接口，然后 "),n("code",[e._v("SimpleInstantiationStrategy")]),e._v(" 实现了该策略，它主要做一些简单的根据构造函数实例号 "),n("code",[e._v("bean")]),e._v(" 的工作，然后 "),n("code",[e._v("CglibSubclassingInstantiationStrategy")]),e._v(" 又继承了 "),n("code",[e._v("SimpleInstantiationStrategy")]),e._v(" 新增了方法注入方式根据 "),n("code",[e._v("cglib")]),e._v(" 生成代理类实例化方法。")]),e._v(" "),n("p",[e._v("在 "),n("code",[e._v("AbstractAutowireCapableBeanFactory")]),e._v(" 中管理了该策略的一个对象，默认是 "),n("code",[e._v("CglibSubclassingInstantiationStrategy")]),e._v(" 策略，运行时候可以通过 "),n("code",[e._v("setInstantiationStrategy")]),e._v(" 改变实例化策略，如果你自己写个个策略的话。")]),e._v(" "),n("h3",{attrs:{id:"spring-中-aop-代理策略"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-中-aop-代理策略","aria-hidden":"true"}},[e._v("#")]),e._v(" Spring 中 AOP 代理策略")]),e._v(" "),n("p",[n("img",{attrs:{src:"/assets/5879294-7e0b0badc2deef53.png",alt:""}})]),e._v(" "),n("p",[e._v("首先看 "),n("code",[e._v("AopProxyFactory")]),e._v(" 接口类提供了 "),n("code",[e._v("createAopProxy")]),e._v(" 接口，这个是策略模式的接口方法。然后 "),n("code",[e._v("DefaultAopProxyFactory")]),e._v(" 实现了该接口作为策略的实现者。然后 "),n("code",[e._v("ProxyCreatorSupport")]),e._v(" 里面引用了 "),n("code",[e._v("AopProxyFactory")]),e._v("，并且提供了 "),n("code",[e._v("get")]),e._v(", "),n("code",[e._v("set")]),e._v(" 方法用来运行时改变策略，这里 Spring 只实现了 "),n("code",[e._v("DefaultAopProxyFactory")]),e._v(" 这一个策略，如果需要自己也可以写个。")]),e._v(" "),n("p",[n("code",[e._v("DefaultAopProxyFactory")]),e._v(" 里面的 "),n("code",[e._v("createAopProxy")]),e._v(" 的逻辑如下，可以在运行时根据参数决定用 "),n("code",[e._v("Cglib")]),e._v(" 策略还是 "),n("code",[e._v("JDK动态代理")]),e._v(" 策略生成代理类：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public AopProxy createAopProxy(AdvisedSupport config) throws AopConfigException {\n    // 如果 XML 打开了优化开关，或者设置为了代理目标类，或者目前类没有接口\n    if (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) {\n        Class<?> targetClass = config.getTargetClass();\n        if (targetClass == null) {\n            throw new AopConfigException("TargetSource cannot determine target class: " +\n                    "Either an interface or a target is required for proxy creation.");\n        }\n\n        // 如果有接口，或者通过 Proxy.newProxyInstance 生成的，则使用 JDK动态代理\n        if (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) {\n            return new JdkDynamicAopProxy(config);\n        }\n\n        // 使用 CGLIB\n        return new ObjenesisCglibAopProxy(config);\n    }\n    else {\n        // 使用 JDK动态代理\n        return new JdkDynamicAopProxy(config);\n    }\n}\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br")])]),n("p",[e._v("另外 "),n("code",[e._v("AopProxy")]),e._v(" 也是一个策略接口类，具体实现的策略为 "),n("code",[e._v("JdkDynamicAopProxy")]),e._v("，"),n("code",[e._v("CglibAopProxy")]),e._v("，"),n("code",[e._v("ObjenesisCglibAopProxy")])]),e._v(" "),n("h3",{attrs:{id:"tomcat-中-digester-解析-server-xml"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tomcat-中-digester-解析-server-xml","aria-hidden":"true"}},[e._v("#")]),e._v(" Tomcat 中 Digester 解析 server.xml")]),e._v(" "),n("p",[e._v("Tomcat 中的 "),n("code",[e._v("Digester")]),e._v(" 是为了解析 "),n("code",[e._v("server.xml")]),e._v(" 的，其中每个元素都有一个解析规则就是 "),n("code",[e._v("Rule")]),e._v("，DigestER 一开始先指定不同的解析策略（Rule），然后在具体解析 server.xml 时候根据节点不同使用不同解析策略来解析节点。")]),e._v(" "),n("p",[n("img",{attrs:{src:"/assets/5879294-2ef6c46b46d18914.png",alt:""}})]),e._v(" "),n("p",[e._v("如图在解析每个节点时候会先找到该节点对应的解析策略，然后循环去调用所有解析策略的方法去处理。")]),e._v(" "),n("h3",{attrs:{id:"使用场景-5"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用场景-5","aria-hidden":"true"}},[e._v("#")]),e._v(" 使用场景")]),e._v(" "),n("p",[e._v("运行时根据条件的不同使用不同的策略处理一个事情，与责任链不同在于，责任链是一个链条，一个事情可以被责任链里面所有节点处理，而 策略模式则是只有有一个对象来处理。")]),e._v(" "),n("h2",{attrs:{id:"七、门面模式（facade-pattern）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#七、门面模式（facade-pattern）","aria-hidden":"true"}},[e._v("#")]),e._v(" 七、门面模式（Facade Pattern）")]),e._v(" "),n("h3",{attrs:{id:"介绍-6"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#介绍-6","aria-hidden":"true"}},[e._v("#")]),e._v(" 介绍")]),e._v(" "),n("p",[e._v("门面模式是一种结构性模式，它通过新增一个门面类对外暴露系统提供的一部分功能，或者屏蔽了内部系统的复杂性，对外部仅仅暴露一个简单的接口，或者通过调用不同的服务对外提供统一的接口，让使用者对这些内部服务透明化。")]),e._v(" "),n("h3",{attrs:{id:"模板引擎-velocity-中门面模式使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#模板引擎-velocity-中门面模式使用","aria-hidden":"true"}},[e._v("#")]),e._v(" 模板引擎 Velocity 中门面模式使用")]),e._v(" "),n("p",[e._v("Velocity 里面的 "),n("code",[e._v("VelocityEngine")]),e._v(" 和 "),n("code",[e._v("Velocity")]),e._v(" 类都是 "),n("code",[e._v("RuntimeInstance")]),e._v(" 类的门面，后者提供了模板渲染的所有功能，前两者则是内部维护 "),n("code",[e._v("RuntimeInstance")]),e._v(" 的实例，具体工作还是委托给 "),n("code",[e._v("RuntimeInstance")]),e._v(" 来实现。")]),e._v(" "),n("p",[n("img",{attrs:{src:"/assets/5879294-66c15140bfe5ad36.png",alt:""}})]),e._v(" "),n("p",[e._v("如图 "),n("code",[e._v("RuntimeInstance")]),e._v(" 提供了 "),n("code",[e._v("Velocity")]),e._v(" 引擎的所用功能，"),n("code",[e._v("VelocityEngine")]),e._v(" 内部直接引用了 "),n("code",[e._v("RuntimeInstance")]),e._v(" 的一个实例，"),n("code",[e._v("VelocityEngine")]),e._v(" 对外暴露的服务都是委托 "),n("code",[e._v("RuntimeInstance")]),e._v(" 实现，并且每次 "),n("code",[e._v("new")]),e._v(" 一个 "),n("code",[e._v("VelocityEngine")]),e._v(" 内部都会有 "),n("code",[e._v("RuntimeInstance")]),e._v(" 的一个实例被创建。而 "),n("code",[e._v("Velocity")]),e._v(" 类调用了单例模式类 "),n("code",[e._v("RuntimeSingleton")]),e._v(" 里面的方法，"),n("code",[e._v("RuntimeSingleton")]),e._v(" 又是 "),n("code",[e._v("RuntimeInstance")]),e._v(" 的一个单例模式。")]),e._v(" "),n("h3",{attrs:{id:"使用场景-6"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用场景-6","aria-hidden":"true"}},[e._v("#")]),e._v(" 使用场景")]),e._v(" "),n("ul",[n("li",[e._v("当需要对外屏蔽一个系统的复杂性时候可以考虑使用门面模式对外提供简单可读性高的接口类")]),e._v(" "),n("li",[e._v("当需要对外部暴露系统一部分权限的接口时候可以考虑使用门面模式减少系统权限。")]),e._v(" "),n("li",[e._v("当系统需要调用不同服务汇总后在对外提供服务时候可以考虑使用门面模式对外屏蔽细节，之暴露一个接口。")])]),e._v(" "),n("h2",{attrs:{id:"八、装饰器模式（decorator-pattern）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#八、装饰器模式（decorator-pattern）","aria-hidden":"true"}},[e._v("#")]),e._v(" 八、装饰器模式（Decorator Pattern）")]),e._v(" "),n("h3",{attrs:{id:"介绍-7"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#介绍-7","aria-hidden":"true"}},[e._v("#")]),e._v(" 介绍")]),e._v(" "),n("p",[e._v("装饰器模式是一种结构性模式，它作用是对对象已有功能进行增强，但是不改变原有对象结构。这避免了通过继承方式进行功能扩充导致的类体系臃肿。")]),e._v(" "),n("h3",{attrs:{id:"spring-中-beandefinitiondecorator"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-中-beandefinitiondecorator","aria-hidden":"true"}},[e._v("#")]),e._v(" Spring 中 BeanDefinitionDecorator")]),e._v(" "),n("p",[n("img",{attrs:{src:"/assets/5879294-f9a9a083d138e9d0.png",alt:""}})]),e._v(" "),n("p",[e._v("如图 "),n("code",[e._v("ScopedProxyBeanDefinitionDecorator")]),e._v(" 实现了 "),n("code",[e._v("decorate")]),e._v(" 方法用来对 "),n("code",[e._v("scope")]),e._v(" 作用域为 "),n("code",[e._v("request")]),e._v(" 的 "),n("code",[e._v("bean")]),e._v(" 定义进行包装。具体时序图为：")]),e._v(" "),n("p",[n("img",{attrs:{src:"/assets/5879294-cab488a963d04657.png",alt:""}})]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('class ScopedProxyBeanDefinitionDecorator implements BeanDefinitionDecorator {\n\n    private static final String PROXY_TARGET_CLASS = "proxy-target-class";\n\n\n    @Override\n    public BeanDefinitionHolder decorate(Node node, BeanDefinitionHolder definition, ParserContext parserContext) {\n        boolean proxyTargetClass = true;\n        if (node instanceof Element) {\n            Element ele = (Element) node;\n            if (ele.hasAttribute(PROXY_TARGET_CLASS)) {\n                proxyTargetClass = Boolean.valueOf(ele.getAttribute(PROXY_TARGET_CLASS));\n            }\n        }\n\n        // 创建scoped的代理类，并注册到容器\n        BeanDefinitionHolder holder =\n                ScopedProxyUtils.createScopedProxy(definition, parserContext.getRegistry(), proxyTargetClass);\n        String targetBeanName = ScopedProxyUtils.getTargetBeanName(definition.getBeanName());\n        parserContext.getReaderContext().fireComponentRegistered(\n                new BeanComponentDefinition(definition.getBeanDefinition(), targetBeanName));\n        return holder;\n    }\n\n}\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br")])]),n("p",[e._v("关于 "),n("code",[e._v("ScopedProxyBeanDefinitionDecorator")]),e._v(" 干啥用的呢：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<bean id="lavaPvgInfo" class="com.alibaba.lava.privilege.PrivilegeInfo"\n    scope="request">\n    <property name="aesKey" value="666" />\n    <aop:scoped-proxy />\n</bean>\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("p",[e._v("其实就是处理 "),n("code",[e._v("<aop:scoped-proxy />")]),e._v(" 的，具体作用是包装 "),n("code",[e._v("lavaPvgInfo")]),e._v(" 的 "),n("code",[e._v("bean")]),e._v(" 定义为 "),n("code",[e._v("ScopedProxyFactoryBean")]),e._v("，作用是实现 "),n("code",[e._v("request")]),e._v(" 作用域 "),n("code",[e._v("bean")])]),e._v(" "),n("h3",{attrs:{id:"commons-collections-包中-listutils"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#commons-collections-包中-listutils","aria-hidden":"true"}},[e._v("#")]),e._v(" commons-collections 包中 ListUtils")]),e._v(" "),n("p",[n("img",{attrs:{src:"/assets/5879294-afa39758e0c2213d.png",alt:""}})]),e._v(" "),n("ul",[n("li",[n("code",[e._v("ListUtils")]),e._v(" 中的四个方法分别依赖 "),n("code",[e._v("list")]),e._v(" 的四种装饰器类对 "),n("code",[e._v("List")]),e._v(" 功能进行扩充和限制。")]),e._v(" "),n("li",[e._v("其中 "),n("code",[e._v("FixedSizeList")]),e._v(" 类通过禁止 "),n("code",[e._v("add/remove")]),e._v(" 操作保证 "),n("code",[e._v("list")]),e._v(" 的大小固定，但是可以修改元素内容")]),e._v(" "),n("li",[e._v("其中 "),n("code",[e._v("UnmodifiableList")]),e._v(" 类通过禁用 "),n("code",[e._v("add")]),e._v(", "),n("code",[e._v("clear")]),e._v(", "),n("code",[e._v("remove")]),e._v(", "),n("code",[e._v("set")]),e._v(",保证 "),n("code",[e._v("list")]),e._v(" 的内容不被修改")]),e._v(" "),n("li",[e._v("其中 "),n("code",[e._v("SynchronizedList")]),e._v(" 类通过使用 "),n("code",[e._v("Lock")]),e._v(" 来保证 "),n("code",[e._v("add")]),e._v(", "),n("code",[e._v("set")]),e._v(", "),n("code",[e._v("get")]),e._v(", "),n("code",[e._v("remove")]),e._v(" 等的同步安全")]),e._v(" "),n("li",[e._v("其中 "),n("code",[e._v("LazyList")]),e._v(" 类则当调用 "),n("code",[e._v("get")]),e._v(" 方法发现 "),n("code",[e._v("list")]),e._v(" 里面不存在对象时候，自动使用 "),n("code",[e._v("factory")]),e._v(" 创建对象.")])]),e._v(" "),n("h3",{attrs:{id:"使用场景-7"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用场景-7","aria-hidden":"true"}},[e._v("#")]),e._v(" 使用场景")]),e._v(" "),n("p",[e._v("在不改变原有类结构基础上，新增或者限制或者改造功能时候。")]),e._v(" "),n("h2",{attrs:{id:"九、适配器模式（adapter-pattern）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#九、适配器模式（adapter-pattern）","aria-hidden":"true"}},[e._v("#")]),e._v(" 九、适配器模式（Adapter Pattern）")]),e._v(" "),n("h3",{attrs:{id:"介绍-8"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#介绍-8","aria-hidden":"true"}},[e._v("#")]),e._v(" 介绍")]),e._v(" "),n("p",[e._v("适配器模式属于结构性模式，它为两个不同接口之间互通提供了一种手段。")]),e._v(" "),n("h3",{attrs:{id:"spring-中-methodinterceptor-适配器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-中-methodinterceptor-适配器","aria-hidden":"true"}},[e._v("#")]),e._v(" Spring 中 MethodInterceptor 适配器")]),e._v(" "),n("p",[e._v("在 Spring Aop 框架中，"),n("code",[e._v("MethodInterceptor")]),e._v(" 接口被用来拦截指定的方法，对方法进行增强。")]),e._v(" "),n("p",[n("img",{attrs:{src:"/assets/5879294-5eacbfe80fc60237.png",alt:""}})]),e._v(" "),n("p",[e._v("大家都知道在 AOP 中每个 "),n("code",[e._v("advistor")]),e._v(" 里面会有一个 "),n("code",[e._v("advice")]),e._v(" 具体做切面动作，Spring 提供了 "),n("code",[e._v("AspectJAfterReturningAdvice")]),e._v("，"),n("code",[e._v("AspectJMethodBeforeAdvice")]),e._v("，"),n("code",[e._v("AspectJAroundAdvice")]),e._v("，"),n("code",[e._v("AspectJAfterAdvice")]),e._v(" 这几个 "),n("code",[e._v("advice")]),e._v(",在 XML 配置 AOP 时候会指定 "),n("code",[e._v("<aop:after-returning/>")]),e._v(", "),n("code",[e._v("<aop:before/>")]),e._v(", "),n("code",[e._v("<aop:around/>")]),e._v(", "),n("code",[e._v("<aop:after/>")]),e._v(", 其实内部就是创建上面对应的这些 "),n("code",[e._v("advice")]),e._v("。")]),e._v(" "),n("p",[e._v("从图知道 "),n("code",[e._v("AspectJAfterReturningAdvice")]),e._v(" 和 "),n("code",[e._v("AspectJMethodBeforeAdvice")]),e._v(" 没有实现 "),n("code",[e._v("MethodInterceptor")]),e._v(" 接口，其他两者则实现了该接口。而 Spring Aop 的方法拦截器却必须是实现了 "),n("code",[e._v("MethodInterceptor")]),e._v(" 的，所以 Spring 提供了对应的适配器来适配这个问题,分别是 "),n("code",[e._v("MethodBeforeAdviceAdapter")]),e._v(" 和 "),n("code",[e._v("AfterReturningAdviceAdapter")]),e._v(" 和 "),n("code",[e._v("ThrowsAdviceAdapter")]),e._v("。")]),e._v(" "),n("p",[n("img",{attrs:{src:"/assets/5879294-072d44bda8af7ef9.png",alt:""}})]),e._v(" "),n("p",[e._v("看下 "),n("code",[e._v("DefaultAdvisorAdapterRegistry")]),e._v(" 的 "),n("code",[e._v("getInterceptors")]),e._v(" 方法：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public MethodInterceptor[] getInterceptors(Advisor advisor) throws UnknownAdviceTypeException {\n    List<MethodInterceptor> interceptors = new ArrayList<MethodInterceptor>(3);\n\n    //从advistor中获取advice\n    Advice advice = advisor.getAdvice();\n\n    //如果实现了MethodInterceptor则直接加入，比如AspectJAroundAdvice，AspectJAfterAdvice\n    if (advice instanceof MethodInterceptor) {\n        interceptors.add((MethodInterceptor) advice);\n    }\n\n    //否者看是否有当前advice的适配器，首先检验是否支持，支持则返回对应的适配器\n    for (AdvisorAdapter adapter : this.adapters) {\n        if (adapter.supportsAdvice(advice)) {\n            interceptors.add(adapter.getInterceptor(advisor));\n        }\n    }\n    if (interceptors.isEmpty()) {\n        throw new UnknownAdviceTypeException(advisor.getAdvice());\n    }\n    return interceptors.toArray(new MethodInterceptor[interceptors.size()]);\n}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br")])]),n("p",[e._v("以 "),n("code",[e._v("MethodBeforeAdviceAdapter")]),e._v(" 为例子看下：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('class MethodBeforeAdviceAdapter implements AdvisorAdapter, Serializable {\n\n    public boolean supportsAdvice(Advice advice) {\n        return (advice instanceof MethodBeforeAdvice);\n    }\n\n    public MethodInterceptor getInterceptor(Advisor advisor) {\n        MethodBeforeAdvice advice = (MethodBeforeAdvice) advisor.getAdvice();\n        return new MethodBeforeAdviceInterceptor(advice);\n    }\n\n}\n\npublic class MethodBeforeAdviceInterceptor implements MethodInterceptor, Serializable {\n\n    private MethodBeforeAdvice advice;\n\n\n    /**\n     * Create a new MethodBeforeAdviceInterceptor for the given advice.\n     * @param advice the MethodBeforeAdvice to wrap\n     */\n    public MethodBeforeAdviceInterceptor(MethodBeforeAdvice advice) {\n        Assert.notNull(advice, "Advice must not be null");\n        this.advice = advice;\n    }\n\n    public Object invoke(MethodInvocation mi) throws Throwable {\n        this.advice.before(mi.getMethod(), mi.getArguments(), mi.getThis() );\n        return mi.proceed();\n    }\n\n}\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br")])]),n("p",[e._v("可知 "),n("code",[e._v("MethodBeforeAdviceInterceptor")]),e._v(" 继承了 "),n("code",[e._v("MethodInterceptor")]),e._v(" 作为了一个适配器内部委托请求给 "),n("code",[e._v("MethodBeforeAdvice")]),e._v("。")]),e._v(" "),n("h3",{attrs:{id:"使用场景-8"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用场景-8","aria-hidden":"true"}},[e._v("#")]),e._v(" 使用场景")]),e._v(" "),n("ul",[n("li",[e._v("两个系统交互时候由于接口参数不一样没办法直接对接，则可以搞个适配器接口做参数转换。")]),e._v(" "),n("li",[e._v("适配器模式经常是在一个系统或者设计已经定型时候用的，而不是在初始设计时候。一般是因为不影响现在业务情况下，通过适配方式统一接口")])]),e._v(" "),n("h2",{attrs:{id:"十、模板方法模式（template-pattern）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#十、模板方法模式（template-pattern）","aria-hidden":"true"}},[e._v("#")]),e._v(" 十、模板方法模式（Template Pattern）")]),e._v(" "),n("h3",{attrs:{id:"介绍-9"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#介绍-9","aria-hidden":"true"}},[e._v("#")]),e._v(" 介绍")]),e._v(" "),n("p",[e._v("模板设计模式是一种行为设计模式，它使用一个抽象类定义了一个模板，这个模板里面定义了一系列的接口，子类则只需要继承该抽象类并且根据需要重写一部分接口。")]),e._v(" "),n("h3",{attrs:{id:"ibatis2-中-abstractdaotemplate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ibatis2-中-abstractdaotemplate","aria-hidden":"true"}},[e._v("#")]),e._v(" ibatis2 中 AbstractDAOTemplate")]),e._v(" "),n("p",[n("img",{attrs:{src:"/assets/5879294-27b737718c1a71bc.png",alt:""}})]),e._v(" "),n("p",[e._v("如图 "),n("code",[e._v("AbstractDAOTemplate")]),e._v(" 是抽象模板类，里面定义了 "),n("code",[e._v("configure")]),e._v(" 方法，"),n("code",[e._v("configure")]),e._v(" 方法里面定义了好多 "),n("code",[e._v("protected")]),e._v(" 方法，其中就有些是抽象方法。类 "),n("code",[e._v("SpringDAOTemplate")]),e._v("，"),n("code",[e._v("IbatisDAOTemplate")]),e._v("，"),n("code",[e._v("GenericCIDAOTemplate")]),e._v("，"),n("code",[e._v("GenericSIDAOTemplate")]),e._v(" 则继承了 "),n("code",[e._v("AbstractDAOTemplate")]),e._v(" 类并重写了一部分方法。")]),e._v(" "),n("h3",{attrs:{id:"tomcat-中-digester-里面的-rule"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tomcat-中-digester-里面的-rule","aria-hidden":"true"}},[e._v("#")]),e._v(" Tomcat 中 Digester 里面的 Rule")]),e._v(" "),n("p",[e._v("Tomcat 中的 "),n("code",[e._v("Digester")]),e._v(" 是为了解析 "),n("code",[e._v("server.xml")]),e._v(" 的，其中每个元素都有一个解析规则就是 "),n("code",[e._v("Rule")]),e._v(" ,类图如下：")]),e._v(" "),n("p",[n("img",{attrs:{src:"/assets/5879294-d5e4f335d709ab29.png",alt:""}})]),e._v(" "),n("p",[e._v("如图：Rule 是抽象类，对于每个解析的节点来说 Rule 提供了解析所需所有的方法，而他的子类则根据自己的特殊性重写一部分方法来支持自己的特性。")]),e._v(" "),n("h3",{attrs:{id:"tomcat-中-endpoint"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tomcat-中-endpoint","aria-hidden":"true"}},[e._v("#")]),e._v(" Tomcat 中 Endpoint")]),e._v(" "),n("p",[n("img",{attrs:{src:"/assets/5879294-bd4bb3f72e7da976.png",alt:""}})]),e._v(" "),n("p",[e._v("如图 "),n("code",[e._v("AbstractEndpoint")]),e._v(" 是个抽象类，定义了 "),n("code",[e._v("Endpoint")]),e._v(" 的所有接口，然后 "),n("code",[e._v("JIoEndpoint")]),e._v(" 继承了该类并且重写了一部分重要的方法实现了 "),n("code",[e._v("BIO")]),e._v(" 方式 "),n("code",[e._v("endpoint")]),e._v(" , "),n("code",[e._v("NioEndpoint")]),e._v(" 则重写了方法实现了 "),n("code",[e._v("NIO")]),e._v(" 的 "),n("code",[e._v("endpoint")]),e._v(".")]),e._v(" "),n("h3",{attrs:{id:"使用场景-9"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用场景-9","aria-hidden":"true"}},[e._v("#")]),e._v(" 使用场景")]),e._v(" "),n("p",[e._v("当多个子类具有共同的操作流程逻辑，并且其中某些流程节点操作需要自己定制化时候。")]),e._v(" "),n("h2",{attrs:{id:"十一、建造者模式（builder-pattern）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#十一、建造者模式（builder-pattern）","aria-hidden":"true"}},[e._v("#")]),e._v(" 十一、建造者模式（Builder Pattern）")]),e._v(" "),n("h3",{attrs:{id:"介绍-10"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#介绍-10","aria-hidden":"true"}},[e._v("#")]),e._v(" 介绍")]),e._v(" "),n("p",[e._v("建造者模式是一种创建型模式，将一个复制对象的创建屏蔽到接口内部，用户使用时候只需要传递固定的参数，内部就会执行复杂逻辑后返回会用户需要的对象，用户不需要知道创建的细节。")]),e._v(" "),n("h3",{attrs:{id:"mybatis-中的-sqlsessionfactorybuilder"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-中的-sqlsessionfactorybuilder","aria-hidden":"true"}},[e._v("#")]),e._v(" Mybatis 中的 SqlSessionFactoryBuilder")]),e._v(" "),n("p",[n("img",{attrs:{src:"/assets/5879294-96342ae1a578c8c6.png",alt:""}})]),e._v(" "),n("p",[e._v("如图 MyBaits 中的 "),n("code",[e._v("SqlSessionFactoryBuilder")]),e._v(" 就是典型的创建者模式，他内部有多个 "),n("code",[e._v("build")]),e._v(" 方法，根据参数的不同创建出 "),n("code",[e._v("SqlSessionFactory")]),e._v(" 对象，使用者只需要传递具体参数而不用关系内部是如何创建出需要的对象的。"),n("code",[e._v("SqlSessionFactoryBean")]),e._v(" 大家应该很熟悉，在 xml 里面配置的。")]),e._v(" "),n("h3",{attrs:{id:"使用场景-10"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用场景-10","aria-hidden":"true"}},[e._v("#")]),e._v(" 使用场景")]),e._v(" "),n("p",[e._v("当一个对象比较复杂并且容易出错时候，可以考虑这种模式去屏蔽创造细节。")]),e._v(" "),n("h2",{attrs:{id:"十二、观察者模式（observer-pattern）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#十二、观察者模式（observer-pattern）","aria-hidden":"true"}},[e._v("#")]),e._v(" 十二、观察者模式（Observer Pattern）")]),e._v(" "),n("h3",{attrs:{id:"介绍-11"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#介绍-11","aria-hidden":"true"}},[e._v("#")]),e._v(" 介绍")]),e._v(" "),n("p",[e._v("观察者模式是一种行为模式，它定义了当一个对象的状态或者属性发生变化时候，通通知其他对这些状态感兴趣的对象。观察者模式也叫发布-订阅模式，就是说当你订阅了摸一个主体时候，如果发布者改变了主题内容，那么所有订阅这个主体者都会受到通知。")]),e._v(" "),n("h3",{attrs:{id:"spring-中-applicationlistener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-中-applicationlistener","aria-hidden":"true"}},[e._v("#")]),e._v(" Spring 中 ApplicationListener")]),e._v(" "),n("p",[n("img",{attrs:{src:"/assets/5879294-eee8a0c0437a83d5.png",alt:""}})]),e._v(" "),n("p",[e._v("如图 黄色部分的 "),n("code",[e._v("listener")]),e._v(" 们可以认为是订阅者，红色的 "),n("code",[e._v("context")]),e._v(" 是发布者，"),n("code",[e._v("context")]),e._v(" 在 "),n("code",[e._v("IOC")]),e._v(" 不同状态会给这些订阅者发布不同的消息通知订阅者容器状态。蓝色的为具体的事件（这里为容器不同状态），其中 "),n("code",[e._v("ContextRefreshedEvent")]),e._v(" 是 "),n("code",[e._v("IOC")]),e._v(" 刷新完成（也就是 "),n("code",[e._v("bean")]),e._v(" 解析完成，创建完毕并且 "),n("code",[e._v("autowired")]),e._v(" 完成）后的事件这个经常用。\n。这里 "),n("code",[e._v("context")]),e._v(" 并不是直接来管理黄色的 "),n("code",[e._v("listener")]),e._v(" 订阅者的，而是委托给了绿色的部分，该部分是可以增加删除订阅者，并且发布事件给订阅者。")]),e._v(" "),n("p",[e._v("其实 Tomcat 中的 "),n("code",[e._v("Lifecycle")]),e._v(" 也是这种机制")]),e._v(" "),n("h3",{attrs:{id:"使用场景-11"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用场景-11","aria-hidden":"true"}},[e._v("#")]),e._v(" 使用场景")]),e._v(" "),n("p",[e._v("满足发布-订阅条件的，当一个对象状态或者属性变化，需要把这种变化通知到订阅者时候。")]),e._v(" "),n("h2",{attrs:{id:"十三、命令模式（command-pattern）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#十三、命令模式（command-pattern）","aria-hidden":"true"}},[e._v("#")]),e._v(" 十三、命令模式（Command Pattern）")]),e._v(" "),n("h3",{attrs:{id:"介绍-12"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#介绍-12","aria-hidden":"true"}},[e._v("#")]),e._v(" 介绍")]),e._v(" "),n("p",[e._v("命令模式是一种行为模式，通过把命令封装为一个对象，命令发送者把命令对象发出后，就不去管是谁来接受处理这个命令，命令接受者接受到命令对象后进行处理，也不用管命令是谁发出的，所以命令模式实现了发送者与接受者之间的解耦，而具体把命令发送给谁还需要一个控制器。")]),e._v(" "),n("h3",{attrs:{id:"tomcat-中命令模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tomcat-中命令模式","aria-hidden":"true"}},[e._v("#")]),e._v(" Tomcat 中命令模式")]),e._v(" "),n("p",[e._v("Tomcat 作为一个服务器本身会接受外部大量请求，当一个请求过来后 Tomcat 根据域名去找对应的 host,找到 host 后会根据应用名去找具体的 context(应用)，然后具体应用处理请求。对于具体 host 来说他不关心这个请求是谁给的，对应请求来说他不必关心谁来处理，但是两者是通过 request 封装请求对象进行关联起来。")]),e._v(" "),n("p",[n("img",{attrs:{src:"/assets/5879294-f9e90281b20fe688.png",alt:""}})]),e._v(" "),n("p",[e._v("Tomcat 中 "),n("code",[e._v("Connector")]),e._v(" 作为命令发出者，"),n("code",[e._v("Connector")]),e._v(" 接受到请求后把请求内容封装为 "),n("code",[e._v("request")]),e._v(" 对象（命令对象），然后使用 "),n("code",[e._v("CoyoteAdapter")]),e._v(" 作为分发器把请求具体发配到具体的 "),n("code",[e._v("host")]),e._v(", "),n("code",[e._v("host")]),e._v(" 在根据 "),n("code",[e._v("request")]),e._v(" 对象找到具体的 "),n("code",[e._v("context")]),e._v(",至此找到了具体的应用，交给具体应用处理。")]),e._v(" "),n("p",[e._v("另外对于使用 SpringMVC 的应用来说，上面找到具体应用，但是具体交给那个 controller 来处理那，这是不是也是命令模式的使用那。")]),e._v(" "),n("h3",{attrs:{id:"使用场景-12"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用场景-12","aria-hidden":"true"}},[e._v("#")]),e._v(" 使用场景")]),e._v(" "),n("p",[e._v("当事件发送者和接受者直接需要完全解耦（直接并不存在引用关系）时候。")]),e._v(" "),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),n("p",[e._v("设计模式中每一个模式都描述了在我们工作中不断重复发生的问题，以及问题的解决方案，所以真正掌握设计模式可以避免我们做不必要的重复劳动。")])])},[],!1,null,null,null);a.default=s.exports}}]);