(window.webpackJsonp=window.webpackJsonp||[]).push([[626],{413:function(t,r,e){"use strict";e.r(r);var a=e(2),i=Object(a.a)({},function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简介","aria-hidden":"true"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),e("h2",{attrs:{id:"本节视频"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#本节视频","aria-hidden":"true"}},[t._v("#")]),t._v(" 本节视频")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://www.bilibili.com/video/av48590637/?p=1",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring Security oAuth2-简介"),e("OutboundLink")],1)])]),t._v(" "),e("h2",{attrs:{id:"概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概述","aria-hidden":"true"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),e("p",[t._v("本章节的目的是帮助大家快速上手使用 Spring 提供的 Spring Security oAuth2 搭建一套验证授权及资源访问服务，帮助大家在实现企业微服务架构时能够有效的控制多个服务的统一登录、授权及资源保护工作")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/topsale/spring-boot-samples/tree/master/spring-security-oauth2",target:"_blank",rel:"noopener noreferrer"}},[e("strong",[t._v("GitHub")]),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"什么是-oauth"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是-oauth","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是 oAuth")]),t._v(" "),e("p",[t._v("oAuth 协议为用户资源的授权提供了一个安全的、开放而又简易的标准。与以往的授权方式不同之处是 oAuth 的授权不会使第三方触及到用户的帐号信息（如用户名与密码），即第三方无需使用用户的用户名与密码就可以申请获得该用户资源的授权，因此 oAuth 是安全的。")]),t._v(" "),e("h2",{attrs:{id:"什么是-spring-security"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是-spring-security","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是 Spring Security")]),t._v(" "),e("p",[t._v("Spring Security 是一个安全框架，前身是 Acegi Security，能够为 Spring 企业应用系统提供声明式的安全访问控制。Spring Security 基于 Servlet 过滤器、IoC 和 AOP，为 Web 请求和方法调用提供身份确认和授权处理，避免了代码耦合，减少了大量重复代码工作。")])])},[],!1,null,null,null);r.default=i.exports}}]);