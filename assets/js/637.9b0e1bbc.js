(window.webpackJsonp=window.webpackJsonp||[]).push([[637],{398:function(e,t,a){"use strict";a.r(t);var r=a(2),s=Object(r.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"客户端授权模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#客户端授权模式","aria-hidden":"true"}},[e._v("#")]),e._v(" 客户端授权模式")]),e._v(" "),a("h2",{attrs:{id:"本节视频"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本节视频","aria-hidden":"true"}},[e._v("#")]),e._v(" 本节视频")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.bilibili.com/video/av48590637/?p=6",target:"_blank",rel:"noopener noreferrer"}},[e._v("Spring Security oAuth2-简单模式与授权码模式"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://www.bilibili.com/video/av48590637/?p=7",target:"_blank",rel:"noopener noreferrer"}},[e._v("Spring Security oAuth2-密码模式与客户端模式"),a("OutboundLink")],1)])]),e._v(" "),a("h2",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述","aria-hidden":"true"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),a("p",[e._v("客户端必须得到用户的授权（authorization grant），才能获得令牌（access token）。oAuth 2.0 定义了四种授权方式。")]),e._v(" "),a("ul",[a("li",[e._v("implicit：简化模式，不推荐使用")]),e._v(" "),a("li",[e._v("authorization code：授权码模式")]),e._v(" "),a("li",[e._v("resource owner password credentials：密码模式")]),e._v(" "),a("li",[e._v("client credentials：客户端模式")])]),e._v(" "),a("h2",{attrs:{id:"简化模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简化模式","aria-hidden":"true"}},[e._v("#")]),e._v(" 简化模式")]),e._v(" "),a("p",[e._v("简化模式适用于纯静态页面应用。所谓纯静态页面应用，也就是应用没有在服务器上执行代码的权限（通常是把代码托管在别人的服务器上），只有前端 JS 代码的控制权。")]),e._v(" "),a("p",[e._v("这种场景下，应用是没有持久化存储的能力的。因此，按照 oAuth2.0 的规定，这种应用是拿不到 Refresh Token 的。其整个授权流程如下：")]),e._v(" "),a("p",[a("img",{attrs:{src:"/funtl/assets1/Lusifer_201904010002.png",alt:""}})]),e._v(" "),a("p",[e._v("该模式下，"),a("code",[e._v("access_token")]),e._v(" 容易泄露且不可刷新")]),e._v(" "),a("h2",{attrs:{id:"授权码模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#授权码模式","aria-hidden":"true"}},[e._v("#")]),e._v(" 授权码模式")]),e._v(" "),a("p",[e._v("授权码模式适用于有自己的服务器的应用，它是一个一次性的临时凭证，用来换取 "),a("code",[e._v("access_token")]),e._v(" 和 "),a("code",[e._v("refresh_token")]),e._v("。认证服务器提供了一个类似这样的接口：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("https://www.funtl.com/exchange?code=&client_id=&client_secret=\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("需要传入 "),a("code",[e._v("code")]),e._v("、"),a("code",[e._v("client_id")]),e._v(" 以及 "),a("code",[e._v("client_secret")]),e._v("。验证通过后，返回 "),a("code",[e._v("access_token")]),e._v(" 和 "),a("code",[e._v("refresh_token")]),e._v("。一旦换取成功，"),a("code",[e._v("code")]),e._v(" 立即作废，不能再使用第二次。流程图如下：")]),e._v(" "),a("p",[a("img",{attrs:{src:"/funtl/assets1/Lusifer_201904010003.png",alt:""}})]),e._v(" "),a("p",[e._v("这个 code 的作用是保护 token 的安全性。上一节说到，简单模式下，token 是不安全的。这是因为在第 4 步当中直接把 token 返回给应用。而这一步容易被拦截、窃听。引入了 code 之后，即使攻击者能够窃取到 code，但是由于他无法获得应用保存在服务器的 "),a("code",[e._v("client_secret")]),e._v("，因此也无法通过 code 换取 token。而第 5 步，为什么不容易被拦截、窃听呢？这是因为，首先，这是一个从服务器到服务器的访问，黑客比较难捕捉到；其次，这个请求通常要求是 https 的实现。即使能窃听到数据包也无法解析出内容。")]),e._v(" "),a("p",[e._v("有了这个 code，token 的安全性大大提高。因此，oAuth2.0 鼓励使用这种方式进行授权，而简单模式则是在不得已情况下才会使用。")]),e._v(" "),a("h2",{attrs:{id:"密码模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#密码模式","aria-hidden":"true"}},[e._v("#")]),e._v(" 密码模式")]),e._v(" "),a("p",[e._v('密码模式中，用户向客户端提供自己的用户名和密码。客户端使用这些信息，向 "服务商提供商" 索要授权。在这种模式中，用户必须把自己的密码给客户端，但是客户端不得储存密码。这通常用在用户对客户端高度信任的情况下，比如客户端是操作系统的一部分。')]),e._v(" "),a("p",[e._v("一个典型的例子是同一个企业内部的不同产品要使用本企业的 oAuth2.0 体系。在有些情况下，产品希望能够定制化授权页面。由于是同个企业，不需要向用户展示“xxx将获取以下权限”等字样并询问用户的授权意向，而只需进行用户的身份认证即可。这个时候，由具体的产品团队开发定制化的授权界面，接收用户输入账号密码，并直接传递给鉴权服务器进行授权即可。")]),e._v(" "),a("p",[a("img",{attrs:{src:"/funtl/assets1/Lusifer_2019040104250001.png",alt:""}})]),e._v(" "),a("p",[e._v("有一点需要特别注意的是，在第 2 步中，认证服务器需要对客户端的身份进行验证，确保是受信任的客户端。")]),e._v(" "),a("h2",{attrs:{id:"客户端模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#客户端模式","aria-hidden":"true"}},[e._v("#")]),e._v(" 客户端模式")]),e._v(" "),a("p",[e._v("如果信任关系再进一步，或者调用者是一个后端的模块，没有用户界面的时候，可以使用客户端模式。鉴权服务器直接对客户端进行身份验证，验证通过后，返回 token。")]),e._v(" "),a("p",[a("img",{attrs:{src:"/funtl/assets1/Lusifer_2019040104270001.png",alt:""}})])])},[],!1,null,null,null);t.default=s.exports}}]);