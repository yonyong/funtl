(window.webpackJsonp=window.webpackJsonp||[]).push([[283],{853:function(e,t,o){"use strict";o.r(t);var n=o(2),r=Object(n.a)({},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"spring-mvc-启动流程"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc-启动流程","aria-hidden":"true"}},[e._v("#")]),e._v(" Spring MVC 启动流程")]),e._v(" "),o("p",[e._v("在 "),o("code",[e._v("web.xml")]),e._v(" 文件中给 Spring MVC 的 Servlet 配置了 "),o("code",[e._v("load-on-startup")]),e._v("，所以程序启动的时候会初始化 Spring MVC，在 "),o("code",[e._v("HttpServletBean")]),e._v(" 中将配置的 "),o("code",[e._v("contextConfigLocation")]),e._v(" 属性设置到 Servlet 中，然后在 "),o("code",[e._v("FrameworkServlet")]),e._v(" 中创建了 "),o("code",[e._v("WebApplicationContext")]),e._v("，"),o("code",[e._v("DispatcherServlet")]),e._v(" 根据 "),o("code",[e._v("contextConfigLocation")]),e._v(" 配置的 "),o("code",[e._v("classpath")]),e._v(" 下的 xml 文件初始化了 Spring MVC 总的组件。")])])},[],!1,null,null,null);t.default=r.exports}}]);