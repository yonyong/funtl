(window.webpackJsonp=window.webpackJsonp||[]).push([[213],{843:function(a,t,r){"use strict";r.r(t);var e=r(2),v=Object(e.a)({},function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"为什么需要版本控制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要版本控制","aria-hidden":"true"}},[a._v("#")]),a._v(" 为什么需要版本控制")]),a._v(" "),r("h2",{attrs:{id:"本节视频"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#本节视频","aria-hidden":"true"}},[a._v("#")]),a._v(" 本节视频")]),a._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://www.bilibili.com/video/av32561616/",target:"_blank",rel:"noopener noreferrer"}},[a._v("【视频】Git工作流指南-什么是版本控制系统"),r("OutboundLink")],1)])]),a._v(" "),r("h2",{attrs:{id:"概述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#概述","aria-hidden":"true"}},[a._v("#")]),a._v(" 概述")]),a._v(" "),r("p",[a._v("在软件开发过程，每天都会产生新的代码，代码合并的过程中可能会出现如下问题：")]),a._v(" "),r("ul",[r("li",[a._v("代码被覆盖或丢失")]),a._v(" "),r("li",[a._v("代码写的不理想希望还原之前的版本")]),a._v(" "),r("li",[a._v("希望知道与之前版本的差别")]),a._v(" "),r("li",[a._v("是谁修改了代码以及为什么修改")]),a._v(" "),r("li",[a._v("发版时希望分成不同的版本(测试版、发行版等)")])]),a._v(" "),r("p",[a._v("因此，我们希望有一种机制，能够帮助我们：")]),a._v(" "),r("ul",[r("li",[a._v("可以随时回滚到之前的版本")]),a._v(" "),r("li",[a._v("协同开发时不会覆盖别人的代码")]),a._v(" "),r("li",[a._v("留下修改记录，以便随时查看")]),a._v(" "),r("li",[a._v("发版时可以方便的管理不同的版本")])]),a._v(" "),r("h2",{attrs:{id:"什么是版本控制系统"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是版本控制系统","aria-hidden":"true"}},[a._v("#")]),a._v(" 什么是版本控制系统")]),a._v(" "),r("p",[a._v("一个标准的版本控制系统 Version Control System (VCS)，通常需要有以下功能：")]),a._v(" "),r("ul",[r("li",[a._v("能够创建 Repository (仓库)，用来保存代码")]),a._v(" "),r("li",[a._v("协同开发时方便将代码分发给团队成员")]),a._v(" "),r("li",[a._v("记录每次修改代码的内容、时间、原因等信息")]),a._v(" "),r("li",[a._v("能够创建 Branch (分支)，可以根据不同的场景进行开发")]),a._v(" "),r("li",[a._v("能够创建 Tag (标签)，建立项目里程碑")])]),a._v(" "),r("h2",{attrs:{id:"版本控制系统的发展史"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#版本控制系统的发展史","aria-hidden":"true"}},[a._v("#")]),a._v(" 版本控制系统的发展史")]),a._v(" "),r("p",[a._v("版本控制系统发展至今有几种不同的模式：")]),a._v(" "),r("h3",{attrs:{id:"local-vcs"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#local-vcs","aria-hidden":"true"}},[a._v("#")]),a._v(" Local VCS")]),a._v(" "),r("p",[a._v("本地使用 "),r("code",[a._v("复制/粘贴")]),a._v(" 的方式进行管理，缺点是无法协同开发")]),a._v(" "),r("h3",{attrs:{id:"centralized-vcs-lock，悲观锁"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#centralized-vcs-lock，悲观锁","aria-hidden":"true"}},[a._v("#")]),a._v(" Centralized VCS (Lock，悲观锁)")]),a._v(" "),r("p",[a._v("中央集中式版本控制系统团队共用仓库，当某人需要编辑文件时，进行锁定，以免其他人同时编辑时造成冲突。缺点是虽然避免了冲突，但不是很方便。其他人需要排队才能编辑文件，如果有人编辑了很久或是忘记解锁就会造成其他人长时间等待的情况。")]),a._v(" "),r("h3",{attrs:{id:"centralized-vcs-merge，乐观锁"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#centralized-vcs-merge，乐观锁","aria-hidden":"true"}},[a._v("#")]),a._v(" Centralized VCS (Merge，乐观锁)")]),a._v(" "),r("p",[a._v("中央集中式版本控制系统团队共用仓库，不采用悲观锁方式来避免冲突，而是事后发现如果别人也修改相同文件(冲突)，再进行手动修改解决。有很多 VCS 属于这种类型，如：CVS，Subversion，Perforce 等")]),a._v(" "),r("p",[a._v("中央集中式版本控制系统的共同问题是，做任何操作都需要和服务器同步，如果服务器宕机则会造成无法继续工作的窘迫。")]),a._v(" "),r("h3",{attrs:{id:"distributed-vcs"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#distributed-vcs","aria-hidden":"true"}},[a._v("#")]),a._v(" Distributed VCS")]),a._v(" "),r("p",[a._v("分布式版本控制系统，本地也拥有完整的代码仓库，就不会出现上述集中式管理的问题，即使没有网络，依然可以 "),r("code",[a._v("commit")]),a._v(" 和看 "),r("code",[a._v("log")]),a._v("，也无需担心服务器同步问题。如：Git，Mercurial，Bazaar 等就属于分布式版本控制系统。缺点是功能比较复杂，上手需要一定的学习时间。")])])},[],!1,null,null,null);t.default=v.exports}}]);